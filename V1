import streamlit as st
from openai import OpenAI
import os
import sys
import importlib.util
import json

# Configuration du client OpenAI
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

def load_py_module(file_path, module_name):
    try:
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)
        return module
    except Exception as e:
        print(f"Erreur lors du chargement du module {module_name}: {e}")
        return None

# Chemins des modules √† charger
prestations_path = './prestations-heures.py'
tarifs_path = './tarifs-prestations.py'
instructions_path = './chatbot-instructions.py'

prestations_module = load_py_module(prestations_path, 'prestations_heures')
tarifs_module = load_py_module(tarifs_path, 'tarifs_prestations')
instructions_module = load_py_module(instructions_path, 'consignes_chatbot')

# D√©finition des variables globales
global prestations, tarifs, instructions
prestations = prestations_module.get_prestations() if prestations_module else {}
tarifs = tarifs_module.get_tarifs() if tarifs_module else {}
instructions = instructions_module.get_chatbot_instructions() if instructions_module else ""

def analyze_question(question, client_type, urgency):
    global prestations
    options = []
    for domaine, prestations_domaine in prestations.items():
        prestations_str = ', '.join(prestations_domaine.keys())
        options.append(f"{domaine}: {prestations_str}")
    options_str = '\n'.join(options)

    prompt = f"""En tant qu'assistant juridique du cabinet View Avocats, analysez la question suivante et identifiez le domaine juridique et la prestation juridique la plus pertinente parmi les options donn√©es.


Question : {question}
Type de client : {client_type}
Degr√© d'urgence : {urgency}


Options de domaines et prestations :
{options_str}


R√©pondez avec le domaine et la prestation la plus pertinente, s√©par√©s par une virgule."""


    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": instructions},
            {"role": "user", "content": prompt}
        ]
    )

    
    answer = response.choices[0].message.content.strip()
    parts = answer.split(',')
    if len(parts) >= 2:
        return parts[0].strip(), parts[1].strip()
    else:
        return answer, "prestation g√©n√©rale"


def calculate_estimate(domaine, prestation, urgency):
    try:
        heures = prestations.get(domaine, {}).get(prestation, 10)
        tarif_horaire = tarifs.get("tarif_horaire_standard")
        if tarif_horaire is None:
            raise KeyError("tarif_horaire_standard non trouv√© dans tarifs")
       
        estimation = heures * tarif_horaire


        calcul_details = [f"Heures estim√©es: {heures}"]
        calcul_details.append(f"Tarif horaire standard: {tarif_horaire} ‚Ç¨")
        calcul_details.append(f"Estimation initiale: {heures} x {tarif_horaire} = {estimation} ‚Ç¨")


        if urgency == "Urgent":
            facteur_urgence = tarifs.get("facteur_urgence", 1.5)
            estimation *= facteur_urgence
            calcul_details.append(f"Facteur d'urgence appliqu√©: x{facteur_urgence}")
            calcul_details.append(f"Estimation apr√®s urgence: {estimation} ‚Ç¨")


        forfait = tarifs.get("forfaits", {}).get(prestation)
        if forfait:
            calcul_details.append(f"Forfait disponible pour cette prestation: {forfait} ‚Ç¨")
            if forfait < estimation:
                estimation = forfait
                calcul_details.append(f"Forfait appliqu√© car plus avantageux: {forfait} ‚Ç¨")
            else:
                calcul_details.append("Forfait non appliqu√© car moins avantageux que l'estimation horaire")


        estimation_basse = round(estimation * 0.8)
        estimation_haute = round(estimation * 1.2)
        calcul_details.append(f"Fourchette d'estimation: {estimation_basse} ‚Ç¨ - {estimation_haute} ‚Ç¨")


        tarifs_utilises = {
            "tarif_horaire_standard": tarif_horaire,
            "facteur_urgence": tarifs.get("facteur_urgence") if urgency == "Urgent" else "Non appliqu√©",
            "forfait_prestation": forfait if forfait else "Pas de forfait pour cette prestation"
        }


        return estimation_basse, estimation_haute, calcul_details, tarifs_utilises
    except Exception as e:
        print(f"Erreur dans calculate_estimate: {str(e)}")
        print(f"tarifs: {tarifs}")
        print(f"prestations: {prestations}")
        raise



import json
import re
from typing import Tuple, Dict, Any

import json
import re
from typing import Tuple, Dict, Any

import json
import re
from typing import Tuple, Dict, Any
import logging

# Configuration du logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def get_detailed_analysis(question: str, client_type: str, urgency: str, domaine: str, prestation: str) -> Tuple[str, Dict[str, Any], str]:
    prompt = f"""
    En tant qu'assistant juridique expert, analysez la question suivante et expliquez votre raisonnement pour le choix du domaine juridique et de la prestation.
    
    Question : {question}
    Type de client : {client_type}
    Degr√© d'urgence : {urgency}
    Domaine recommand√© : {domaine}
    Prestation recommand√©e : {prestation}

    Structurez votre r√©ponse en trois parties distinctes :
    1. Analyse d√©taill√©e : Expliquez votre raisonnement de mani√®re claire et concise.
    2. √âl√©ments sp√©cifiques utilis√©s : Fournissez un objet JSON valide et strict, avec des guillemets doubles pour toutes les cl√©s et les valeurs string. 
       Exemple : {{"domaine": {{"nom": "Droit_du_travail", "description": "Encadre les relations entre employeurs et salari√©s"}}, "prestation": {{"nom": "Contestation_licenciement", "description": "Assistance juridique pour contester un licenciement"}}}}
    3. Sources d'information : Listez les sources sp√©cifiques utilis√©es (fichiers de tarifs, de prestations, ou autres sources internes).

    Assurez-vous que chaque partie est clairement s√©par√©e et que le JSON est correctement format√©.
    """

    try:
        logger.info("Envoi de la requ√™te √† l'API OpenAI")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Vous √™tes un assistant juridique expert qui explique son raisonnement de mani√®re d√©taill√©e et transparente."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=1000
        )

        full_response = response.choices[0].message.content.strip()
        logger.debug(f"R√©ponse compl√®te de l'API : {full_response}")
        
        # S√©paration des parties de la r√©ponse
        parts = re.split(r'\d+\.|\*\*', full_response)
        parts = [part.strip() for part in parts if part.strip()]
        logger.debug(f"Parties s√©par√©es de la r√©ponse : {parts}")

        analysis = parts[0] if parts else "Analyse non disponible."
        elements_used = {}
        sources = "Aucune source sp√©cifique mentionn√©e."

        if len(parts) > 1:
            elements_str = parts[1]
            logger.debug(f"Partie des √©l√©ments sp√©cifiques : {elements_str}")
            # Tentative d'extraction du JSON
            json_match = re.search(r'(\{.*?\})', elements_str, re.DOTALL)
            if json_match:
                try:
                    elements_used = json.loads(json_match.group(1))
                    logger.info("JSON extrait avec succ√®s")
                except json.JSONDecodeError as e:
                    logger.error(f"Erreur lors du parsing JSON : {e}")

            # Si l'extraction du JSON a √©chou√©, on extrait les informations manuellement
            if not elements_used:
                logger.info("Extraction manuelle des informations")
                domaine_match = re.search(r'domaine .*? est le (.*?),', elements_str)
                prestation_match = re.search(r'prestation recommand√©e est (.*?)\.|$', elements_str)
                
                elements_used = {
                    "domaine": {"nom": domaine_match.group(1) if domaine_match else "Non sp√©cifi√©"},
                    "prestation": {"nom": prestation_match.group(1) if prestation_match else "Non sp√©cifi√©e"}
                }

        if len(parts) > 2:
            sources = parts[2]

        logger.info("Analyse termin√©e avec succ√®s")
        return analysis, elements_used, sources

    except Exception as e:
        logger.exception(f"Erreur lors de l'appel √† l'API ou du traitement de la r√©ponse : {e}")
        return "Une erreur s'est produite lors de l'analyse.", {"error": "Erreur lors de l'analyse", "details": str(e)}, "Non disponible en raison d'une erreur."


def main():
    st.set_page_config(page_title="View Avocats - Devis en ligne", page_icon="‚öñÔ∏è", layout="wide")
    st.title("üèõÔ∏è View Avocats - Estimateur de devis")
    st.write("Obtenez une estimation rapide pour vos besoins juridiques.")

    # V√©rification initiale des donn√©es charg√©es
    if not prestations or not tarifs:
        st.error("Erreur : Donn√©es non charg√©es correctement")
        st.json({
            "prestations": {k: list(v.keys()) for k, v in prestations.items()} if prestations else {},
            "tarifs": {k: v for k, v in tarifs.items() if k != 'forfaits'} if tarifs else {},
            "instructions": instructions[:100] + "..." if instructions else "Vide"
        })
        if not prestations:
            st.error("Les prestations n'ont pas √©t√© charg√©es. Veuillez v√©rifier le fichier prestations-heures.py")
        if not tarifs:
            st.error("Les tarifs n'ont pas √©t√© charg√©s. Veuillez v√©rifier le fichier tarifs-prestations.py")
        return


    # Interface utilisateur de base
    client_type = st.selectbox("Vous √™tes :", ("Particulier", "Professionnel", "Soci√©t√©"))
    urgency = st.selectbox("Degr√© d'urgence :", ("Normal", "Urgent"))
    question = st.text_area("Expliquez bri√®vement votre cas :", height=150)


    if st.button("Obtenir une estimation", key="estimate_button"):
        if question:
            try:
                with st.spinner("Analyse en cours..."):
                    # √âtape 1 : Analyse de la question
                    domaine, prestation = analyze_question(question, client_type, urgency)
                    st.write(f"Domaine identifi√© : {domaine}")
                    st.write(f"Prestation recommand√©e : {prestation}")


                    # √âtape 2 : Calcul de l'estimation
                    estimation_basse, estimation_haute, calcul_details, tarifs_utilises = calculate_estimate(domaine, prestation, urgency)


                    # √âtape 3 : Obtention de l'analyse d√©taill√©e
                    detailed_analysis, elements_used, sources = get_detailed_analysis(question, client_type, urgency, domaine, prestation)


                # Affichage des r√©sultats
                st.success("Analyse termin√©e. Voici les r√©sultats :")


                col1, col2 = st.columns(2)


                with col1:
                    st.subheader("R√©sum√© de l'estimation")
                    st.write(f"**Type de client :** {client_type}")
                    st.write(f"**Degr√© d'urgence :** {urgency}")
                    st.write(f"**Domaine juridique :** {domaine}")
                    st.write(f"**Prestation :** {prestation}")
                    st.write(f"**Estimation :** Entre {estimation_basse} ‚Ç¨HT et {estimation_haute} ‚Ç¨HT")


                    st.subheader("D√©tails du calcul")
                    for detail in calcul_details:
                        st.write(detail)


                with col2:
                    st.subheader("√âl√©ments tarifaires utilis√©s")
                    st.json(tarifs_utilises)


                    if elements_used:
                        st.subheader("√âl√©ments sp√©cifiques pris en compte")
                        st.json(elements_used)


                st.subheader("Analyse d√©taill√©e")
                st.write(detailed_analysis)


                if sources:
                    st.subheader("Sources d'information")
                    st.write(sources)


                # Option alternative
                st.markdown("---")
                st.markdown("### üí° Alternative Recommand√©e")
                st.info("""
                    **Consultation initiale d'une heure**
                    - Tarif fixe : 100 ‚Ç¨ HT
                    - Id√©al pour un premier avis juridique
                    - √âvaluation approfondie de votre situation
                    - Recommandations personnalis√©es
                """)


                # Boutons d'action
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Demander un devis d√©taill√©"):
                        st.success("Nous vous contacterons pour un devis d√©taill√©.")
                with col2:
                    if st.button("R√©server une consultation initiale"):
                        st.success("Nous vous contacterons pour planifier la consultation.")


            except Exception as e:
                st.error(f"Une erreur s'est produite : {str(e)}")
                st.write("D√©tails de l'erreur pour le d√©bogage :")
                st.write(e)
                st.write("√âtat des variables globales :")
                st.json({
                    "prestations": {k: list(v.keys()) for k, v in prestations.items()},
                    "tarifs": {k: v for k, v in tarifs.items() if k != 'forfaits'},
                    "instructions": instructions[:100] + "..." if instructions else "Vide"
                })
        else:
            st.warning("Veuillez d√©crire votre cas avant de demander une estimation.")


    # Informations suppl√©mentaires
    st.markdown("---")
    st.subheader("Nos domaines d'expertise")
    for domaine in prestations.keys():
        st.write(f"- {domaine.replace('_', ' ').title()}")


    st.subheader("Pourquoi choisir View Avocats ?")
    st.write("‚úîÔ∏è Expertise reconnue dans de nombreux domaines du droit")
    st.write("‚úîÔ∏è Approche personnalis√©e pour chaque client")
    st.write("‚úîÔ∏è Transparence des tarifs")
    st.write("‚úîÔ∏è Engagement pour votre succ√®s")


    st.markdown("---")
    st.write("¬© 2024 View Avocats. Tous droits r√©serv√©s.")


if __name__ == "__main__":
    main()
